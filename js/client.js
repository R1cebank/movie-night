(function() {
  var httpProxy,
    __slice = [].slice;

  httpProxy = require('http-proxy');

  angular.module('Movie-Night.client', []).service('MnClient', function() {
    var eventHandlers, self, socket, userName, uuid;
    self = this;
    eventHandlers = {};
    socket = {};
    userName = '';
    uuid = '';
    this.join = function(serverIP, port, name) {
      httpProxy.createServer({
        target: 'http://' + serverIP + ':' + '1337'
      }).listen(9393);
      console.log('client video proxy started');
      socket = io.connect('http://' + serverIP + ':' + port);
      socket.on('message', function(msg) {
        return self.fireEvent('message', msg);
      });
      socket.on('uuid', function(data) {
        return self.fireEvent('uuid', data);
      });
      socket.on('videoServerStarted', function(data) {
        return self.fireEvent('videoServerStarted', data);
      });
      socket.on('seeked', function(data) {
        return self.fireEvent('seeked', data);
      });
      socket.on('played', function(data) {
        return self.fireEvent('played', data);
      });
      socket.on('paused', function(data) {
        return self.fireEvent('paused', data);
      });
      self.fireEvent('connected');
      userName = name;
      return this.sendName(name);
    };
    this.sendMsg = function(msg) {
      return socket.emit('message', msg);
    };
    this.sendEvent = function(msg) {
      return socket.emit('event', msg);
    };
    this.send = function(event, msg) {
      return socket.emit(event, msg);
    };
    this.on = function(event, handler) {
      return eventHandlers[event] = handler;
    };
    this.fireEvent = function() {
      var data, event;
      event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (eventHandlers[event]) {
        return eventHandlers[event].apply(eventHandlers, data);
      }
    };
    this.sendName = function(name) {
      return socket.emit('name', {
        type: 'name',
        data: name
      });
    };
    return this;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LEVBRFc7SUFBQSxDQXpCYixDQUFBO0FBQUEsSUE0QkEsSUFBQyxDQUFBLElBQUQsR0FBUSxTQUFDLEtBQUQsRUFBUSxHQUFSLEdBQUE7YUFDTixNQUFNLENBQUMsSUFBUCxDQUFZLEtBQVosRUFBbUIsR0FBbkIsRUFETTtJQUFBLENBNUJSLENBQUE7QUFBQSxJQStCQSxJQUFDLENBQUEsRUFBRCxHQUFNLFNBQUMsS0FBRCxFQUFRLE9BQVIsR0FBQTthQUNKLGFBQWMsQ0FBQSxLQUFBLENBQWQsR0FBdUIsUUFEbkI7SUFBQSxDQS9CTixDQUFBO0FBQUEsSUFrQ0EsSUFBQyxDQUFBLFNBQUQsR0FBYSxTQUFBLEdBQUE7QUFDWCxVQUFBLFdBQUE7QUFBQSxNQURZLHNCQUFPLDhEQUNuQixDQUFBO0FBQUEsTUFBQSxJQUFHLGFBQWMsQ0FBQSxLQUFBLENBQWpCO2VBQ0UsYUFBYyxDQUFBLEtBQUEsQ0FBZCxzQkFBcUIsSUFBckIsRUFERjtPQURXO0lBQUEsQ0FsQ2IsQ0FBQTtBQUFBLElBc0NBLElBQUMsQ0FBQSxRQUFELEdBQVksU0FBQyxJQUFELEdBQUE7YUFDVixNQUFNLENBQUMsSUFBUCxDQUFZLE1BQVosRUFBb0I7QUFBQSxRQUFBLElBQUEsRUFBTSxNQUFOO0FBQUEsUUFBYyxJQUFBLEVBQU0sSUFBcEI7T0FBcEIsRUFEVTtJQUFBLENBdENaLENBQUE7QUF5Q0EsV0FBTyxJQUFQLENBMUNtQjtFQUFBLENBRHJCLENBRkEsQ0FBQTtBQUFBIiwiZmlsZSI6ImNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImh0dHBQcm94eSA9IHJlcXVpcmUgJ2h0dHAtcHJveHknXG5cbmFuZ3VsYXIubW9kdWxlKCdNb3ZpZS1OaWdodC5jbGllbnQnLCBbXSlcbi5zZXJ2aWNlICdNbkNsaWVudCcsIC0+XG4gIHNlbGYgPSBAXG4gIGV2ZW50SGFuZGxlcnMgPSB7IH1cbiAgc29ja2V0ID0geyB9XG4gIHVzZXJOYW1lID0gJydcbiAgdXVpZCA9ICcnXG5cbiAgQGpvaW4gPSAoc2VydmVySVAsIHBvcnQsIG5hbWUpIC0+XG4gICAgI1NldHVwIHZpZGVvIHByb3h5IHNlcnZlclxuICAgIGh0dHBQcm94eS5jcmVhdGVTZXJ2ZXIgdGFyZ2V0OiAnaHR0cDovLycgKyBzZXJ2ZXJJUCArICc6JyArICcxMzM3J1xuICAgICAgLmxpc3RlbiA5MzkzXG4gICAgY29uc29sZS5sb2cgJ2NsaWVudCB2aWRlbyBwcm94eSBzdGFydGVkJ1xuICAgIHNvY2tldCA9IGlvLmNvbm5lY3QgJ2h0dHA6Ly8nICsgc2VydmVySVAgKyAnOicgKyBwb3J0XG4gICAgc29ja2V0Lm9uICdtZXNzYWdlJywgKG1zZykgLT4gc2VsZi5maXJlRXZlbnQgJ21lc3NhZ2UnLCBtc2dcbiAgICBzb2NrZXQub24gJ3V1aWQnLCAoZGF0YSkgLT4gc2VsZi5maXJlRXZlbnQgJ3V1aWQnLCBkYXRhXG4gICAgc29ja2V0Lm9uICd2aWRlb1NlcnZlclN0YXJ0ZWQnLCAoZGF0YSkgLT4gc2VsZi5maXJlRXZlbnQgJ3ZpZGVvU2VydmVyU3RhcnRlZCcsIGRhdGFcbiAgICBzb2NrZXQub24gJ3NlZWtlZCcsIChkYXRhKSAtPiBzZWxmLmZpcmVFdmVudCAnc2Vla2VkJywgZGF0YVxuICAgIHNvY2tldC5vbiAncGxheWVkJywgKGRhdGEpIC0+IHNlbGYuZmlyZUV2ZW50ICdwbGF5ZWQnLCBkYXRhXG4gICAgc29ja2V0Lm9uICdwYXVzZWQnLCAoZGF0YSkgLT4gc2VsZi5maXJlRXZlbnQgJ3BhdXNlZCcsIGRhdGFcbiAgICBzZWxmLmZpcmVFdmVudCAnY29ubmVjdGVkJ1xuICAgIHVzZXJOYW1lID0gbmFtZVxuICAgIEBzZW5kTmFtZSBuYW1lXG5cbiAgQHNlbmRNc2cgPSAobXNnKSAtPlxuICAgIHNvY2tldC5lbWl0ICdtZXNzYWdlJywgbXNnXG5cbiAgQHNlbmRFdmVudCA9IChtc2cpIC0+XG4gICAgc29ja2V0LmVtaXQgJ2V2ZW50JywgbXNnXG5cbiAgQHNlbmQgPSAoZXZlbnQsIG1zZykgLT5cbiAgICBzb2NrZXQuZW1pdCBldmVudCwgbXNnXG5cbiAgQG9uID0gKGV2ZW50LCBoYW5kbGVyKSAtPlxuICAgIGV2ZW50SGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlclxuXG4gIEBmaXJlRXZlbnQgPSAoZXZlbnQsIGRhdGEuLi4pIC0+XG4gICAgaWYgZXZlbnRIYW5kbGVyc1tldmVudF1cbiAgICAgIGV2ZW50SGFuZGxlcnNbZXZlbnRdKGRhdGEuLi4pXG5cbiAgQHNlbmROYW1lID0gKG5hbWUpIC0+XG4gICAgc29ja2V0LmVtaXQgJ25hbWUnLCB0eXBlOiAnbmFtZScsIGRhdGE6IG5hbWVcblxuICByZXR1cm4gQFxuIl19