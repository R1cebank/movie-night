(function() {
  var fs, http, util;

  fs = require('fs');

  http = require('http');

  util = require('util');

  angular.module('Movie-Night.videoServer', []).service('MnVideoServer', function() {
    var self;
    self = this;
    this.start = function(path) {
      http.createServer(function(req, res) {
        var chunksize, end, file, partialend, partialstart, parts, range, start, stat, total;
        stat = fs.statSync(path);
        total = stat.size;
        if (req.headers['range']) {
          range = req.headers.range;
          parts = range.replace(/bytes=/, '').split('-');
          partialstart = parts[0];
          partialend = parts[1];
          start = parseInt(partialstart, 10);
          end = partialend ? parseInt(partialend, 10) : total - 1;
          chunksize = end - start + 1;
          console.log('RANGE: ' + start + '-' + end + ' = ' + chunksize);
          file = fs.createReadStream(path, {
            start: start,
            end: end
          });
          res.writeHead(206, {
            'Content-Range': 'bytes ' + start + '-' + end + '/' + total
          }, {
            'Accept-Ranges': 'bytes',
            'Content-Length': chunksize,
            'Content-Type': 'video/mp4'
          });
          return file.pipe(res);
        } else {
          console.log('ALL: ' + total);
          res.writeHead(200, {
            'Content-Length': total,
            'Content-Type': 'video/mp4'
          });
          return fs.createReadStream(path).pipe(res);
        }
      }).listen(1337);
      return console.log("Video Server Running at http://127.0.0.1:1337");
    };
    return this;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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O01BQUEsQ0FBbEIsQ0F3QkEsQ0FBQyxNQXhCRCxDQXdCUSxJQXhCUixDQUFBLENBQUE7YUF5QkEsT0FBTyxDQUFDLEdBQVIsQ0FBWSwrQ0FBWixFQTFCTztJQUFBLENBRlQsQ0FBQTtBQTZCQSxXQUFPLElBQVAsQ0EvQndCO0VBQUEsQ0FGMUIsQ0FKQSxDQUFBO0FBQUEiLCJmaWxlIjoidmlkZW9TZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJmcyA9IHJlcXVpcmUgJ2ZzJ1xuaHR0cCA9IHJlcXVpcmUgJ2h0dHAnXG51dGlsID0gcmVxdWlyZSAndXRpbCdcblxuYW5ndWxhci5tb2R1bGUoJ01vdmllLU5pZ2h0LnZpZGVvU2VydmVyJywgW10pXG5cbi5zZXJ2aWNlICdNblZpZGVvU2VydmVyJywgLT5cblxuICBzZWxmPSBAXG5cbiAgQHN0YXJ0ID0gKHBhdGgpIC0+XG4gICAgaHR0cC5jcmVhdGVTZXJ2ZXIgKHJlcSwgcmVzKS0+XG4gICAgICBzdGF0ID0gZnMuc3RhdFN5bmMocGF0aClcbiAgICAgIHRvdGFsID0gc3RhdC5zaXplXG4gICAgICBpZiByZXEuaGVhZGVyc1sncmFuZ2UnXVxuICAgICAgICByYW5nZSA9IHJlcS5oZWFkZXJzLnJhbmdlXG4gICAgICAgIHBhcnRzID0gcmFuZ2UucmVwbGFjZSAvYnl0ZXM9LywgJydcbiAgICAgICAgICAuc3BsaXQgJy0nXG4gICAgICAgIHBhcnRpYWxzdGFydCA9IHBhcnRzWzBdXG4gICAgICAgIHBhcnRpYWxlbmQgPSBwYXJ0c1sxXVxuXG4gICAgICAgIHN0YXJ0ID0gcGFyc2VJbnQgcGFydGlhbHN0YXJ0LCAxMFxuICAgICAgICBlbmQgPSBpZiBwYXJ0aWFsZW5kIHRoZW4gcGFyc2VJbnQocGFydGlhbGVuZCwgMTApIGVsc2UgdG90YWwtMVxuICAgICAgICBjaHVua3NpemUgPSBlbmQtc3RhcnQrMVxuICAgICAgICBjb25zb2xlLmxvZyAnUkFOR0U6ICcgKyBzdGFydCArICctJyArIGVuZCArICcgPSAnICsgY2h1bmtzaXplXG5cbiAgICAgICAgZmlsZSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0gcGF0aCwgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZFxuICAgICAgICByZXMud3JpdGVIZWFkIDIwNiwgJ0NvbnRlbnQtUmFuZ2UnOiAnYnl0ZXMgJyArIHN0YXJ0ICsgJy0nICsgZW5kICsgJy8nICsgdG90YWwsXG4gICAgICAgICAgJ0FjY2VwdC1SYW5nZXMnOiAnYnl0ZXMnLCAnQ29udGVudC1MZW5ndGgnOiBjaHVua3NpemUsICdDb250ZW50LVR5cGUnOiAndmlkZW8vbXA0J1xuICAgICAgICBmaWxlLnBpcGUocmVzKTtcbiAgICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5sb2cgJ0FMTDogJyArIHRvdGFsXG4gICAgICAgIHJlcy53cml0ZUhlYWQgMjAwLCAnQ29udGVudC1MZW5ndGgnIDogdG90YWwsICdDb250ZW50LVR5cGUnIDogJ3ZpZGVvL21wNCdcbiAgICAgICAgZnMuY3JlYXRlUmVhZFN0cmVhbSBwYXRoXG4gICAgICAgICAgLnBpcGUgcmVzXG4gICAgLmxpc3RlbiAxMzM3XG4gICAgY29uc29sZS5sb2cgXCJWaWRlbyBTZXJ2ZXIgUnVubmluZyBhdCBodHRwOi8vMTI3LjAuMC4xOjEzMzdcIlxuICByZXR1cm4gQFxuIl19