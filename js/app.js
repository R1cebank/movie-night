(function() {
  var ip;

  ip = require('ip');

  angular.module('Movie-Night', ['Movie-Night.client', 'Movie-Night.server', 'Movie-Night.videoServer']).directive('mnScrollBottom', function() {
    return {
      restrict: 'A',
      link: function(scope, el, attr) {
        return scope.$watchCollection(attr.mnScrollBottom, function() {
          return el[0].scrollTop = el[0].scrollHeight;
        });
      }
    };
  }).directive('mnOnSeek', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attr) {
        return $(element).on('seeked', function() {
          return scope.$eval(attr.mnOnSeek, {
            time: element[0].currentTime
          });
        });
      }
    };
  }).directive('mnOnPlay', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attr) {
        return $(element).on('play', function() {
          return scope.$eval(attr.mnOnPlay);
        });
      }
    };
  }).directive('mnOnPause', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attr) {
        return $(element).on('pause', function() {
          return scope.$eval(attr.mnOnPause);
        });
      }
    };
  }).directive('mnControl', function() {
    return {
      restrict: 'A',
      scope: {
        control: '=mnControl'
      },
      link: function(scope, element, attr) {
        var elm;
        scope.control.time = 0;
        scope.control.playing = false;
        elm = element[0];
        scope.$watch('control.playing', function(newValue) {
          if (elm.readyState !== 0) {
            if (newValue) {
              console.log('playing called');
              return elm.play();
            } else {
              return elm.pause();
            }
          }
        });
        $(element).on('play', function() {
          scope.control.playing = true;
          return scope.$apply();
        });
        $(element).on('pause', function() {
          scope.control.playing = false;
          return scope.$apply();
        });
        scope.$watch('control.time', function(newValue, oldValue) {
          if (elm.readyState !== 0 && Math.abs(newValue - oldValue) > 1.0) {
            return elm.currentTime = newValue;
          }
        });
        return $(element).on('timeupdate', function() {
          scope.control.time = elm.currentTime;
          return scope.$apply();
        });
      }
    };
  }).controller('MainController', function($scope, MnClient, MnServer, MnVideoServer) {
    $scope.messages = [];
    $scope.player = {
      time: 0,
      playing: false
    };
    MnClient.on('connected', function(data) {
      return $scope.connected = true;
    });
    MnClient.on('uuid', function(data) {
      return console.log('recived id:' + data.data);
    });
    MnClient.on('message', function(data) {
      console.log('client got: ');
      console.log(data);
      $scope.messages.push(data);
      return $scope.$digest();
    });
    MnClient.on('played', function(data) {
      console.log(data);
      $scope.player.playing = true;
      return $scope.$digest();
    });
    MnClient.on('paused', function(data) {
      console.log(data);
      $scope.player.playing = false;
      return $scope.$digest();
    });
    MnClient.on('videoServerStarted', function(data) {
      console.log('video loaded');
      return document.getElementById("videoWindow").load();
    });
    MnClient.on('seeked', function(data) {
      console.log('recived seeked time ' + data.data);
      $scope.player.time = data.data;
      return $scope.$digest();
    });
    $scope.createServer = function() {
      $scope.showIPInput = false;
      MnServer.start();
      MnClient.join(ip.address(), '3939', 'admin');
      $scope.ip = ip.address();
      return $scope.videoPath = 'http://' + ip.address() + ':1337';
    };
    $scope.submitIP = function(ip) {
      console.log(ip);
      return MnClient.join(ip, '3939');
    };
    $scope.submitMessage = function() {
      var tempMsg;
      tempMsg = {
        type: 'msg',
        data: $scope.messageInput,
        timestamp: new Date().getTime()
      };
      MnClient.sendMsg(tempMsg);
      $scope.messageInput = '';
      console.log('client sent');
      return console.log(tempMsg);
    };
    $scope.onseek = function(time) {
      var tempMsg;
      tempMsg = {
        type: 'seeked',
        data: time,
        timestamp: new Date().getTime()
      };
      return MnClient.sendEvent(tempMsg);
    };
    $scope.videoPlayed = function() {
      var tempMsg;
      tempMsg = {
        type: 'played',
        data: '',
        timestamp: new Date().getTime()
      };
      return MnClient.sendEvent(tempMsg);
    };
    $scope.videoPaused = function() {
      var tempMsg;
      tempMsg = {
        type: 'paused',
        data: '',
        timestamp: new Date().getTime()
      };
      return MnClient.sendEvent(tempMsg);
    };
    return $scope.file_changed = function(element) {
      var tempMsg;
      console.log(element.files[0].path);
      MnVideoServer.start(element.files[0].path);
      tempMsg = {
        type: 'videoServerStarted',
        data: '',
        timestamp: new Date().getTime()
      };
      return MnClient.sendEvent(tempMsg);
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,