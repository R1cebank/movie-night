(function() {
  var app, http, io, uuid;

  app = require('express')();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  angular.module('Movie-Night.server', []).config(function() {
    return app.get('/', function(req, res) {
      return res.send('<h1>Hello world</h1>');
    });
  }).service('MnServer', function() {
    var connectedClients, self;
    self = this;
    connectedClients = [];
    io.on('connection', function(socket) {
      connectedClients.push({
        socket: socket,
        id: uuid.v1()
      });
      console.log('user connected, id: ' + connectedClients[connectedClients.length - 1].id);
      socket.emit('uuid', {
        type: 'uuid',
        data: connectedClients[connectedClients.length - 1].id
      });
      socket.on('disconnect', function() {
        return console.log('user disconnected');
      });
      socket.on('name', function(msg) {
        var client, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = connectedClients.length; _i < _len; _i++) {
          client = connectedClients[_i];
          if (client.socket === socket) {
            client.name = msg.data;
            _results.push(console.log('client ' + client.id + ' is ' + msg.data));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      socket.on('message', function(msg) {
        io.emit('message', msg);
        console.log('server recived:');
        return console.log(msg);
      });
      socket.on('event', function(msg) {
        console.log('event arrived time: ' + msg.timestamp);
        msg.timestamp = new Date().getTime();
        console.log('server side adjusted time: ' + msg.timestamp);
        io.emit(msg.type, msg);
        return console.log('event ' + msg.type + ' is triggered');
      });
      return socket.on('timeUpdate', function(msg) {
        var client, currentClient, _i, _len;
        currentClient = {};
        for (_i = 0, _len = connectedClients.length; _i < _len; _i++) {
          client = connectedClients[_i];
          if (client.socket === socket) {
            currentClient = client;
          }
        }
        return console.log('timeupdated by ' + currentClient.id + ' value: ' + msg.data);
      });
    });
    this.start = function() {
      return http.listen(3939, function() {
        return console.log('server listening on 3939');
      });
    };
    return this;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUFPLElBQVAsQ0F0Q21CO0VBQUEsQ0FMckIsQ0FOQSxDQUFBO0FBQUEiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYXBwID0gcmVxdWlyZSgnZXhwcmVzcycpKClcbmh0dHAgPSByZXF1aXJlKCdodHRwJykuU2VydmVyKGFwcClcbmlvID0gcmVxdWlyZSgnc29ja2V0LmlvJykoaHR0cClcbnV1aWQgPSByZXF1aXJlICdub2RlLXV1aWQnXG5cblxuYW5ndWxhci5tb2R1bGUoJ01vdmllLU5pZ2h0LnNlcnZlcicsIFtdKVxuLmNvbmZpZyAtPlxuICBhcHAuZ2V0ICcvJywgKHJlcSwgcmVzKSAtPlxuICAgIHJlcy5zZW5kKCc8aDE+SGVsbG8gd29ybGQ8L2gxPicpXG5cbi5zZXJ2aWNlICdNblNlcnZlcicsIC0+XG5cbiAgc2VsZiA9IEBcbiAgY29ubmVjdGVkQ2xpZW50cyA9IFtdXG5cbiAgaW8ub24gJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KS0+XG4gICAgY29ubmVjdGVkQ2xpZW50cy5wdXNoIHNvY2tldDogc29ja2V0LCBpZDogdXVpZC52MSgpXG4gICAgY29uc29sZS5sb2cgJ3VzZXIgY29ubmVjdGVkLCBpZDogJyArIGNvbm5lY3RlZENsaWVudHNbY29ubmVjdGVkQ2xpZW50cy5sZW5ndGggLSAxXS5pZFxuICAgIHNvY2tldC5lbWl0ICd1dWlkJywgdHlwZSA6ICd1dWlkJywgZGF0YTogY29ubmVjdGVkQ2xpZW50c1tjb25uZWN0ZWRDbGllbnRzLmxlbmd0aCAtIDFdLmlkXG4gICAgc29ja2V0Lm9uICdkaXNjb25uZWN0JywgLT5cbiAgICAgIGNvbnNvbGUubG9nICd1c2VyIGRpc2Nvbm5lY3RlZCdcbiAgICBzb2NrZXQub24gJ25hbWUnLCAobXNnKSAtPlxuICAgICAgZm9yIGNsaWVudCBpbiBjb25uZWN0ZWRDbGllbnRzXG4gICAgICAgIGlmIGNsaWVudC5zb2NrZXQgPT0gc29ja2V0XG4gICAgICAgICAgY2xpZW50Lm5hbWUgPSBtc2cuZGF0YVxuICAgICAgICAgIGNvbnNvbGUubG9nICdjbGllbnQgJyArIGNsaWVudC5pZCArICcgaXMgJyArIG1zZy5kYXRhXG4gICAgc29ja2V0Lm9uICdtZXNzYWdlJywgKG1zZykgLT5cbiAgICAgIGlvLmVtaXQgJ21lc3NhZ2UnLCBtc2dcbiAgICAgIGNvbnNvbGUubG9nICdzZXJ2ZXIgcmVjaXZlZDonXG4gICAgICBjb25zb2xlLmxvZyBtc2dcbiAgICBzb2NrZXQub24gJ2V2ZW50JywgKG1zZykgLT5cbiAgICAgIGNvbnNvbGUubG9nICdldmVudCBhcnJpdmVkIHRpbWU6ICcgKyBtc2cudGltZXN0YW1wXG4gICAgICAjdGltZSBhZGp1c3RlZFxuICAgICAgbXNnLnRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICBjb25zb2xlLmxvZyAnc2VydmVyIHNpZGUgYWRqdXN0ZWQgdGltZTogJyArIG1zZy50aW1lc3RhbXBcbiAgICAgIGlvLmVtaXQgbXNnLnR5cGUsIG1zZ1xuICAgICAgY29uc29sZS5sb2cgJ2V2ZW50ICcgKyBtc2cudHlwZSArICcgaXMgdHJpZ2dlcmVkJ1xuICAgIHNvY2tldC5vbiAndGltZVVwZGF0ZScsIChtc2cpIC0+XG4gICAgICBjdXJyZW50Q2xpZW50ID0geyB9XG4gICAgICBmb3IgY2xpZW50IGluIGNvbm5lY3RlZENsaWVudHNcbiAgICAgICAgaWYgY2xpZW50LnNvY2tldCA9PSBzb2NrZXRcbiAgICAgICAgICAgIGN1cnJlbnRDbGllbnQgPSBjbGllbnRcbiAgICAgIGNvbnNvbGUubG9nICd0aW1ldXBkYXRlZCBieSAnICsgY3VycmVudENsaWVudC5pZCArICcgdmFsdWU6ICcgKyBtc2cuZGF0YVxuXG5cbiAgQHN0YXJ0ID0gLT5cbiAgICBodHRwLmxpc3RlbiAzOTM5LCAtPlxuICAgICAgY29uc29sZS5sb2cgJ3NlcnZlciBsaXN0ZW5pbmcgb24gMzkzOSdcbiAgcmV0dXJuIEBcbiJdfQ==